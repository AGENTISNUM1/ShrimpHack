package me.alpha432.oyvey.features.modules.exploit;

import com.google.common.eventbus.Subscribe;
import me.alpha432.oyvey.features.modules.Module;
import me.alpha432.oyvey.features.settings.Setting;
import me.alpha432.oyvey.mixin.AccessorPlayerMoveC2SPacket;
import me.alpha432.oyvey.util.models.Timer;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class RaytraceBypass extends Module {
    public static RaytraceBypass INSTANCE;
    public RaytraceBypass() {
        super("RaytraceBypass", "", Category.EXPLOIT, true, false, false);
    }

    public Setting<Boolean> Always = this.register(new Setting<Boolean>("Always", Boolean.TRUE, ""));
    Setting<Mode> mode = register(new Setting("Client", Mode.Motion));
    public Setting<Integer> Keep = this.register(new Setting<Integer>("Keep", 2, 0, 10));
    public Setting<Integer> Delay = this.register(new Setting<Integer>("Delay", 250, 0, 1000));
    public Setting<Integer> offset = this.register(new Setting<Integer>("Offset", 15, 0, 40));

    private final Timer timer = new Timer();

    private float pitch = -91;

    @Subscribe
    public void onPacketSend(Packet<?> packet) {
        switch (mode.getValue()) {
            case Packet -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passedMs(Delay.getValue())) {
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch((0 + Keep.getValue()), (.0 + offset.getValue()), (0 + Keep.getValue())))) {
                        pitch = (float) -75;
                        timer.reset();
                    }
                }
            }
            case Motion -> {
                if (packet instanceof PlayerMoveC2SPacket movePacket && pitch != -91) {
                    if (Always.getValue()) {
                        ((AccessorPlayerMoveC2SPacket) movePacket).setPitch(pitch);
                    }
                    ((AccessorPlayerMoveC2SPacket) movePacket).setPitch(pitch);
                    pitch = -91;
                }
            }
            case Client -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passedMs(Delay.getValue())) {
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch((0 + Keep.getValue()), (.0 + offset.getValue()), (0 + Keep.getValue())))) {
                        pitch = -75;
                        timer.reset();
                    }
                }
            }
        }
    }


    public enum Mode {
        Packet,
        Client,
        Motion
    }
}